import pygame

from classes.Animation import Animation
from classes.Camera import Camera
from classes.Collider import Collider
from classes.EntityCollider import EntityCollider
from classes.Input import Input
from classes.Sprites import Sprites
from entities.EntityBase import EntityBase
from entities.Mushroom import RedMushroom
from traits.bounce import bounceTrait
from traits.go import GoTrait
from traits.jump import JumpTrait
from classes.Pause import Pause

# Définir la classe StaticImage avant de l'utiliser
class StaticImage:
    """Classe simplifiée remplaçant l'animation par une image fixe"""
    def __init__(self, image):
        self.image = image
        self.deltaTime = 0
    
    def update(self):
        # Ne fait rien car c'est une image statique
        pass
    
    def idle(self):
        # Ne fait rien car c'est une image statique
        pass
    
    def inAir(self):
        # Ne fait rien car c'est une image statique
        pass

spriteCollection = Sprites().spriteCollection
# Animations pour Mario
smallAnimation = Animation(
    [
        spriteCollection["mario_run1"].image,
        spriteCollection["mario_run2"].image,
        spriteCollection["mario_run3"].image,
    ],
    spriteCollection["mario_idle"].image,
    spriteCollection["mario_jump"].image,
)
bigAnimation = Animation(
    [
        spriteCollection["mario_big_run1"].image,
        spriteCollection["mario_big_run2"].image,
        spriteCollection["mario_big_run3"].image,
    ],
    spriteCollection["mario_big_idle"].image,
    spriteCollection["mario_big_jump"].image,
)

# Pour la compatibilité avec le code existant, créons aussi des versions statiques
smallStaticImage = StaticImage(spriteCollection["mario_idle"].image)
bigStaticImage = StaticImage(spriteCollection["mario_big_idle"].image)


class Mario(EntityBase):
    def __init__(self, x, y, level, screen, dashboard, sound, gravity=0.8):
        super(Mario, self).__init__(x, y, gravity)
        self.camera = Camera(self.rect, self)
        self.sound = sound
        self.input = Input(self)
        self.inAir = False
        self.inJump = False
        self.powerUpState = 0
        self.invincibilityFrames = 0
        self.traits = {
            "jumpTrait": JumpTrait(self),
            "goTrait": GoTrait(smallAnimation, screen, self.camera, self),  # Utiliser l'animation au lieu de l'image statique
            "bounceTrait": bounceTrait(self),
        }

        self.levelObj = level
        self.collision = Collider(self, level)
        self.screen = screen
        self.EntityCollider = EntityCollider(self)
        self.dashboard = dashboard
        self.restart = False
        self.pause = False
        self.pauseObj = Pause(screen, self, dashboard)

    def update(self):
        if self.invincibilityFrames > 0:
            self.invincibilityFrames -= 1
        self.updateTraits()
        self.moveMario()
        self.camera.move()
        self.applyGravity()
        self.checkEntityCollision()
        self.input.checkForInput()

    def moveMario(self):
        self.rect.y += self.vel.y
        self.collision.checkY()
        self.rect.x += self.vel.x
        self.collision.checkX()

    def applyGravity(self):
        self.vel.y += self.gravity

    def updateTraits(self):
        for trait in self.traits.values():
            try:
                trait.update()
            except Exception as e:
                print(f"Erreur dans updateTraits pour {trait}: {e}")

    def checkEntityCollision(self):
        for ent in self.levelObj.entityList:
            collisionState = self.EntityCollider.check(ent)
            if collisionState.isColliding:
                if ent.type == "Item":
                    self._onCollisionWithItem(ent)
                elif ent.type == "Block":
                    self._onCollisionWithBlock(ent)
                elif ent.type == "Checkpoint":
                    self._onCollisionWithCheckpoint(ent)
                elif "Goomba" in ent.type or "Koopa" in ent.type:
                    self._onCollisionWithMob(ent, collisionState)

    def _onCollisionWithItem(self, item):
        if item.__class__.__name__ == "RedMushroom":
            self.powerup(1)
            item.alive = False
            self.dashboard.points += 1000
            self.sound.play_sfx(self.sound.powerup)

    def _onCollisionWithBlock(self, block):
        pass
        
    def _onCollisionWithCheckpoint(self, checkpoint):
        # Ne rien faire ici, la logique est gérée dans mario_env.py
        pass

    def _onCollisionWithMob(self, mob, collisionState):
        if isinstance(collisionState, tuple):
            # unpack tuple
            isColliding, direction = collisionState
        else:
            isColliding = collisionState.isColliding
            direction = collisionState.direction

        if direction == "top" and mob.alive:
            self.bounce()
            self.killEntity(mob)
            self.sound.play_sfx(self.sound.stomp)
            self.dashboard.points += 100
        elif collisionState.isColliding and mob.alive and not self.invincibilityFrames:
            if self.powerUpState == 0:
                self.gameOver()
            elif self.powerUpState == 1:
                self.powerUpState = 0
                self.traits['goTrait'].updateAnimation(smallAnimation)  # Utiliser l'animation au lieu de l'image statique
                x, y = self.rect.x, self.rect.y
                self.rect = pygame.Rect(x, y + 32, 32, 32)
                self.invincibilityFrames = 60
                self.sound.play_sfx(self.sound.pipe)

    def bounce(self):
        self.traits["bounceTrait"].jump = True

    def killEntity(self, ent):
        if ent.__class__.__name__ != "Koopa":
            ent.alive = False
        else:
            ent.timer = 0
            ent.leftrightTrait.speed = 1
            ent.alive = True
            ent.active = False
            ent.bouncing = False
        self.dashboard.points += 100

    def gameOver(self):
        srf = pygame.Surface((640, 480))
        srf.set_colorkey((255, 255, 255), pygame.RLEACCEL)
        srf.set_alpha(128)
        self.sound.music_channel.stop()
        self.sound.music_channel.play(self.sound.death)

        for i in range(500, 20, -2):
            srf.fill((0, 0, 0))
            pygame.draw.circle(
                srf,
                (255, 255, 255),
                (int(self.camera.x + self.rect.x) + 16, self.rect.y + 16),
                i,
            )
            self.screen.blit(srf, (0, 0))
            pygame.display.update()
            self.input.checkForInput()
        while self.sound.music_channel.get_busy():
            pygame.display.update()
            self.input.checkForInput()
        self.restart = True

    def getPos(self):
        return self.camera.x + self.rect.x, self.rect.y

    def setPos(self, x, y):
        self.rect.x = x
        self.rect.y = y
        
    def powerup(self, powerupID):
        if self.powerUpState == 0:
            if powerupID == 1:
                self.powerUpState = 1
                self.traits['goTrait'].updateAnimation(bigAnimation)  # Utiliser l'animation au lieu de l'image statique
                self.rect = pygame.Rect(self.rect.x, self.rect.y-32, 32, 64)
                self.invincibilityFrames = 20

    def render(self, camera):
        """
        Affiche Mario à l'écran à la bonne position et orientation.
        Force l'affichage de Mario avec un rectangle coloré pour assurer la visibilité.
        """
        try:
            # Position pour l'affichage
            render_x = self.rect.x - camera.x
            render_y = self.rect.y
            
            # FORCER LA VISIBILITÉ: Dessiner un grand rectangle coloré
            pygame.draw.rect(self.screen, (255, 0, 0), (render_x, render_y, self.rect.width, self.rect.height), 0)  # Rectangle rouge plein
            pygame.draw.rect(self.screen, (255, 255, 0), (render_x, render_y, self.rect.width, self.rect.height), 3)  # Bordure jaune épaisse
            
            # Ajouter un texte "MARIO" au-dessus du personnage pour le repérer facilement
            font = pygame.font.Font(None, 20)
            text = font.render("MARIO", True, (255, 255, 255))
            self.screen.blit(text, (render_x, render_y - 20))
            
            # Afficher l'animation si disponible (en supplément du rectangle)
            if hasattr(self.traits["goTrait"], "animation"):
                animation = self.traits["goTrait"].animation
                if hasattr(animation, "image") and animation.image is not None:
                    try:
                        if self.traits["goTrait"].heading == 1:
                            self.screen.blit(animation.image, (render_x, render_y))
                        else:
                            flipped = pygame.transform.flip(animation.image, True, False)
                            self.screen.blit(flipped, (render_x, render_y))
                    except Exception as e:
                        print(f"Erreur lors de l'affichage de l'animation: {e}")
            
            # Toujours ajouter un point central pour améliorer la visibilité
            pygame.draw.circle(self.screen, (0, 0, 255), 
                             (render_x + self.rect.width // 2, render_y + self.rect.height // 2), 5, 0)  # Point bleu au centre
            
        except Exception as e:
            print(f"ERREUR GRAVE dans le rendu de Mario: {e}")
            import traceback
            traceback.print_exc()
